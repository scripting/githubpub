<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>githubpub.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="githubpub.js">
		<outline created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831" text="const myProductName = &quot;githubpub&quot;, myVersion = &quot;0.5.45&quot;;   "></outline>
		<outline text=""></outline>
		<outline text="/*  The MIT License (MIT)">
			<outline text="Copyright (c) 2014-2018 Dave Winer"></outline>
			<outline text=""></outline>
			<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"></outline>
			<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"></outline>
			<outline text="in the Software without restriction, including without limitation the rights"></outline>
			<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"></outline>
			<outline text="copies of the Software, and to permit persons to whom the Software is"></outline>
			<outline text="furnished to do so, subject to the following conditions:"></outline>
			<outline text=""></outline>
			<outline text="The above copyright notice and this permission notice shall be included in all"></outline>
			<outline text="copies or substantial portions of the Software."></outline>
			<outline text=""></outline>
			<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"></outline>
			<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"></outline>
			<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"></outline>
			<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"></outline>
			<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"></outline>
			<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"></outline>
			<outline text="SOFTWARE."></outline>
			<outline text="*/"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="exports.init = init;"></outline>
		<outline text="exports.handleRequest = handleExternalRequest;"></outline>
		<outline text="exports.addToCache = addToCache;"></outline>
		<outline text="exports.cacheRef = cacheRef;"></outline>
		<outline text="exports.cacheDelete = cacheDelete;"></outline>
		<outline text="exports.cacheDump = cacheDump;"></outline>
		<outline text="exports.getCacheSize = getCacheSize;"></outline>
		<outline text="exports.getFromGitHub = getFromGitHub;"></outline>
		<outline text="exports.getContentFromGitHub = getContentFromGitHub; //10/2/18 by DW"></outline>
		<outline isComment="true" text="exports.getRepositoryDomain = getRepositoryDomain;"></outline>
		<outline text="exports.saveToGitHub = saveToGitHub; //10/2/18 by DW"></outline>
		<outline text="exports.getUserInfo = getUserInfo; //10/5/18 by DW"></outline>
		<outline text=""></outline>
		<outline text="const fs = require (&quot;fs&quot;);"></outline>
		<outline text="const utils = require (&quot;daveutils&quot;);"></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="const davehttp = require (&quot;davehttp&quot;); "></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="const request = require (&quot;request&quot;); "></outline>
		<outline text="const marked = require (&quot;marked&quot;);"></outline>
		<outline text="const yaml = require (&quot;js-yaml&quot;);"></outline>
		<outline text="const dateFormat = require (&quot;dateformat&quot;);"></outline>
		<outline text="const qs = require (&quot;querystring&quot;);"></outline>
		<outline text="const rss = require (&quot;daverss&quot;);"></outline>
		<outline text=""></outline>
		<outline text="var config = {">
			<outline text="port: 1402,"></outline>
			<outline text="flLogToConsole: true,"></outline>
			<outline text="flPostEnabled: true,"></outline>
			<outline text="flAllowAccessFromAnywhere: true,"></outline>
			<outline text="flDebugMessagesFromGitHub: false,"></outline>
			<outline text="flDebugObjectsFromGitHub: false,"></outline>
			<outline text="apiUrl: &quot;https://api.github.com/repos/&quot;,"></outline>
			<outline text="indexFileName: &quot;index&quot;,"></outline>
			<outline text="userAgent: myProductName + &quot; v&quot; + myVersion,"></outline>
			<outline text="urlEditorApp: &quot;http://scripting.com/english/testing/&quot;, //9/16/18 by DW"></outline>
			<outline text="templatePath: &quot;template/template.txt&quot;,"></outline>
			<outline text="dataPath: &quot;data.json&quot;, //10/11/18 by DW"></outline>
			<outline text="rssPath: &quot;rss.xml&quot;,  //10/11/18 by DW"></outline>
			<outline text="defaultNameCommitter: &quot;Bull Mancuso&quot;,"></outline>
			<outline text="defaultEmailCommitter: &quot;bull@mancuso.com&quot;,"></outline>
			<outline text="defaultFilesLocation: {">
				<outline text="username: &quot;scripting&quot;,"></outline>
				<outline text="repository: &quot;githubpub&quot;,"></outline>
				<outline text="path: &quot;defaultfiles&quot;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="};"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="var cache = {">
			<outline text="};"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="const yamlDelimiterString = &quot;---\n&quot;;"></outline>
		<outline text=""></outline>
		<outline text="function getFileExtension (url) {">
			<outline text="return (utils.stringLastField (url, &quot;.&quot;).toLowerCase ());"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function urlToMime (url) {">
			<outline text="var ext = getFileExtension (url);"></outline>
			<outline text="return (utils.httpExt2MIME (ext));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function yamlIze (jsontext) {">
			<outline text="var jstruct = JSON.parse (jsontext);"></outline>
			<outline isComment="true" text="const delimiter = &quot;---\n&quot;;"></outline>
			<outline text="var text = jstruct.text;"></outline>
			<outline text="delete jstruct.text;"></outline>
			<outline text="var s = yamlDelimiterString + yaml.safeDump (jstruct) + yamlDelimiterString + text;"></outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function deYamlIze (data) { ">
			<outline isComment="true" text="const delimiter = &quot;---\n&quot;;"></outline>
			<outline text="var filetext = data.toString ();"></outline>
			<outline text="if (utils.beginsWith (filetext, yamlDelimiterString)) {">
				<outline text="var frontmatter = utils.stringNthField (filetext, yamlDelimiterString, 2);"></outline>
				<outline text="var remainingtext = utils.stringDelete (filetext, 1, frontmatter.length + (2 * yamlDelimiterString.length));"></outline>
				<outline text="if (frontmatter.length &gt; 0) {">
					<outline text="var jstruct = yaml.safeLoad (frontmatter);"></outline>
					<outline text="jstruct.text = remainingtext;"></outline>
					<outline text="return (jstruct);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return ({text: filetext});"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return ({text: filetext});"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function longTimeFormat (when) { ">
			<outline text="return (dateFormat (when, &quot;dddd mmmm d, yyyy; h:MM TT Z&quot;));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function httpRequest (url, callback) {">
			<outline text="var options = {">
				<outline text="url: url,"></outline>
				<outline text="jar: true, //&quot;remember cookies for future use&quot;"></outline>
				<outline text="maxRedirects: 5,"></outline>
				<outline text="headers: {">
					<outline text="&quot;User-Agent&quot;: myProductName + &quot; v&quot; + myVersion"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="request (options, callback);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function getRepositoryDomain (username, repository) { //9/30/18 by DW">
			<outline text="username = utils.stringLower (username);"></outline>
			<outline text="repository = utils.stringLower (repository);"></outline>
			<outline text="for (var domain in config.domains) {">
				<outline text="var item = config.domains [domain];"></outline>
				<outline text="if ((utils.stringLower (item.username) == username) &amp;&amp; (utils.stringLower (item.repository) == repository)) {">
					<outline text="return (domain);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (undefined);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function cacheDump (callback) {">
			<outline text="if (callback === undefined) {">
				<outline text="callback = console.log;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="for (var username in cache) {">
				<outline text="for (var repository in cache [username]) {">
					<outline text="for (var path in cache [username] [repository]) {">
						<outline text="callback (username + &quot;.&quot; + repository + &quot;.&quot; + path);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function addToCache (username, repository, path, data) {">
			<outline text="var now = new Date ();"></outline>
			<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
				<outline text="path = &quot;/&quot; + path;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (cache [username] === undefined) {">
				<outline text="cache [username] = {">
					<outline text="};"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (cache [username] [repository] === undefined) {">
				<outline text="cache [username] [repository] = {">
					<outline text="};"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (cache [username] [repository] [path] === undefined) {">
				<outline text="cache [username] [repository] [path] = {">
					<outline text="ctAdds: 0,"></outline>
					<outline text="whenRef: now"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="cache [username] [repository] [path].ctAdds++;"></outline>
			<outline text="cache [username] [repository] [path].whenAdd = now;"></outline>
			<outline text="cache [username] [repository] [path].data = data;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function cacheRef (username, repository, path) {">
			<outline text="var now = new Date ();"></outline>
			<outline text="if (cache [username] !== undefined) {">
				<outline text="if (cache [username] [repository] !== undefined) {">
					<outline text="if (cache [username] [repository] [path] !== undefined) {">
						<outline text="var item = cache [username] [repository] [path];"></outline>
						<outline text="item.ct++;"></outline>
						<outline text="item.whenRef = now;"></outline>
						<outline isComment="true" text="console.log (&quot;cacheRef: serving from cache, username == &quot; + username + &quot;, repository == &quot; + repository + &quot;, path == &quot; + path);"></outline>
						<outline text="return (item.data);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (undefined);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function cacheDelete (username, repository, path) {">
			<outline isComment="true" text=""></outline>
			<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
				<outline text="path = &quot;/&quot; + path;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text=""></outline>
			<outline isComment="true" text="console.log (&quot;cacheDelete --- here's a dump of the cache.&quot;)"></outline>
			<outline isComment="true" text="cacheDump ();"></outline>
			<outline isComment="true" text=""></outline>
			<outline text="if (cache [username] !== undefined) {">
				<outline text="if (cache [username] [repository] !== undefined) {">
					<outline text="if (cache [username] [repository] [path] !== undefined) {">
						<outline text="delete cache [username] [repository] [path];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getCacheSize () {">
			<outline text="var ct = 0;"></outline>
			<outline text="cacheDump (function (s) {">
				<outline text="ct++;"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="return (ct);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFromGitHub (username, repository, path, callback) { //calls back with the JSON structure GitHub returns">
			<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
				<outline text="path = &quot;/&quot; + path;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var data = cacheRef (username, repository, path);"></outline>
			<outline text="if (data !== undefined) {">
				<outline isComment="true" text="console.log (&quot;getFromGitHub: serving from cache, path == &quot; + path);"></outline>
				<outline text="callback (undefined, data);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="var whenstart = new Date ();"></outline>
				<outline text="var url = config.apiUrl + username + &quot;/&quot; + repository + &quot;/contents/&quot; + path;"></outline>
				<outline text="if ((config.clientId !== undefined) &amp;&amp; (config.clientSecret !== undefined)) {">
					<outline text="url += &quot;?client_id=&quot; + config.clientId + &quot;&amp;client_secret=&quot; + config.clientSecret;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="httpRequest (url, function (err, response, jsontext) {">
					<outline text="if (err) {">
						<outline text="callback (err);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (response.statusCode == 404) {">
							<outline text="callback ({message: &quot;The file \&quot;&quot; + path + &quot;\&quot; was not found.&quot;});"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline isComment="true" text="console.log (&quot;getFromGitHub: response.headers == &quot; + utils.jsonStringify (response.headers))"></outline>
							<outline text="if (response.headers [&quot;x-ratelimit-remaining&quot;] == 0) {">
								<outline text="var theLimit = response.headers [&quot;x-ratelimit-limit&quot;];"></outline>
								<outline text="callback ({&quot;message&quot;: &quot;GitHub reported a rate limit error. You are limited to &quot; + theLimit + &quot; calls per hour.&quot;});"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"></outline>
									<outline isComment="true" text="console.log (&quot;getFromGitHub: path == &quot; + path + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"></outline>
									<outline text="addToCache (username, repository, path, jstruct);"></outline>
									<outline text="if (config.flDebugObjectsFromGitHub) {">
										<outline text="var f = &quot;debug/objects/&quot; + Number (new Date ()) + &quot;.json&quot;;"></outline>
										<outline text="utils.sureFilePath (f, function () {">
											<outline text="fs.writeFile (f, utils.jsonStringify (jstruct), function (err) {">
												<outline text="});"></outline>
												</outline>
											<outline text="});"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="callback (undefined, jstruct);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (err);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getContentFromGitHub (domain, path, callback) { //calls back with the content GitHub returned">
			<outline text="var dstruct = config.domains [domain.toLowerCase ()]"></outline>
			<outline text="if (dstruct === undefined) {">
				<outline text="var s = &quot;The domain \&quot;&quot; + domain + &quot;\&quot; is not defined.&quot;;"></outline>
				<outline text="console.log (&quot;getContentFromGitHub: s == &quot; + s);"></outline>
				<outline text="callback ({message: s});"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
					<outline text="path = &quot;/&quot; + path;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="getFromGitHub (dstruct.username, dstruct.repository, dstruct.path + path, function (err, jstruct) {">
					<outline text="if (err) {">
						<outline text="callback (err);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var content = jstruct.content;"></outline>
						<outline text="if (jstruct.encoding == &quot;base64&quot;) {">
							<outline text="content = new Buffer (content, &quot;base64&quot;); "></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="callback (undefined, content);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getUserObject (host, path, callback) { //get object from user repo, if not found, look in the default location for the system">
			<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
				<outline text="path = &quot;/&quot; + path;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var dstruct = config.domains [host.toLowerCase ()];"></outline>
			<outline text="if (dstruct === undefined) {">
				<outline text="callback ({message: &quot;The domain \&quot;&quot; + host + &quot;\&quot; is not defined.&quot;});"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="getFromGitHub (dstruct.username, dstruct.repository, dstruct.path + path, function (err, jstruct) {">
					<outline text="if (err) {">
						<outline text="var loc = config.defaultFilesLocation;"></outline>
						<outline text="getFromGitHub (loc.username, loc.repository, loc.path + path, callback);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="callback (undefined, jstruct);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="})"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getTemplate (host, callback) {">
			<outline text="getUserObject (host, config.templatePath, function (err, jstruct) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;getTemplate: err.message == &quot; + err.message);"></outline>
					<outline text="callback (err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var buffer = new Buffer (jstruct.content, &quot;base64&quot;); "></outline>
					<outline text="callback (undefined, buffer.toString ());"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function renderThroughTemplate (pagetable, callback) {">
			<outline text="getTemplate (pagetable.host, function (err, templatetext) { ">
				<outline text="if (err) {">
					<outline text="callback (err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="function setPagePropertiesJson () {">
						<outline text="var myprops = new Object ();"></outline>
						<outline text="utils.copyScalars (pagetable, myprops);"></outline>
						<outline text="delete myprops.bodytext;"></outline>
						<outline text="pagetable.pageproperties = utils.jsonStringify (myprops);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (pagetable.title === undefined) {">
						<outline text="pagetable.title = utils.stringLastField (pagetable.path, &quot;/&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="pagetable.createdstring = longTimeFormat (pagetable.created);"></outline>
					<outline text="pagetable.modifiedstring = longTimeFormat (pagetable.modified);"></outline>
					<outline text="pagetable.now = new Date ();"></outline>
					<outline text="setPagePropertiesJson ();"></outline>
					<outline text="var htmltext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"></outline>
					<outline text="callback (undefined, htmltext);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveToGitHub (options, callback) { //10/2/18 by DW">
			<outline isComment="true" text="Changes">
				<outline text="10/10/18; 10:26:05 AM by DW">
					<outline text="If domain is not provided, look for username/repository and use that. Allows low-level apps to use GHP to write to repos. My Frontier-based toolchain depends on that ability."></outline>
					</outline>
				</outline>
			<outline text="if (options.domain !== undefined) {">
				<outline text="var lowerdomain = options.domain.toLowerCase ();"></outline>
				<outline text="var dstruct = config.domains [lowerdomain]"></outline>
				<outline text="if (dstruct === undefined) {">
					<outline text="var s = &quot;The domain \&quot;&quot; + lowerdomain + &quot;\&quot; is not defined.&quot;;"></outline>
					<outline text="console.log (&quot;saveToGitHub: s == &quot; + s);"></outline>
					<outline text="callback ({message: s});"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="options.username = dstruct.username;"></outline>
				<outline text="options.repository = dstruct.repository;"></outline>
				<outline text="if (!utils.beginsWith (options.path, &quot;/&quot;)) {">
					<outline text="options.path = &quot;/&quot; + options.path;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="options.origpath = options.path;"></outline>
				<outline text="options.path = dstruct.path + options.path;"></outline>
				<outline text="options.lowerdomain = lowerdomain;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="cacheDelete (options.username, options.repository, options.path); //make sure we don't use the cached version, if any"></outline>
			<outline text="getFromGitHub (options.username, options.repository, options.path, function (err, jstruct) {">
				<outline text="if (options.committer === undefined) {">
					<outline text="options.committer = {">
						<outline text="name: config.defaultNameCommitter,"></outline>
						<outline text="email: config.defaultEmailCommitter"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (options.message === undefined) {">
					<outline text="options.message = &quot;.&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var bodyStruct = { ">
					<outline text="message: options.message,"></outline>
					<outline text="committer: {">
						<outline text="name: options.committer.name,"></outline>
						<outline text="email: options.committer.email"></outline>
						<outline text="},"></outline>
						</outline>
					<outline text="content: new Buffer (options.data).toString (&quot;base64&quot;)"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="if (jstruct !== undefined) {">
					<outline text="bodyStruct.sha = jstruct.sha;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var url = config.apiUrl + options.username + &quot;/&quot; + options.repository + &quot;/contents/&quot; + options.path;"></outline>
				<outline isComment="true" text="var url = &quot;https://api.github.com/repos/&quot; + dstruct.username + &quot;/&quot; + dstruct.repository + &quot;/contents/&quot; + actualpath;"></outline>
				<outline text="var theRequest = {">
					<outline text="method: &quot;PUT&quot;,"></outline>
					<outline text="url: url,"></outline>
					<outline text="body: JSON.stringify (bodyStruct),"></outline>
					<outline text="headers: {">
						<outline text="&quot;User-Agent&quot;: options.userAgent,"></outline>
						<outline text="&quot;Authorization&quot;: &quot;token &quot; + options.accessToken,"></outline>
						<outline text="&quot;Content-Type&quot;: options.type"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="};"></outline>
					</outline>
				<outline isComment="true" text="console.log (&quot;saveToGitHub: theRequest == &quot; + utils.jsonStringify (theRequest));"></outline>
				<outline text="request (theRequest, function (err, response, body) { ">
					<outline text="if (err) {">
						<outline text="console.log (&quot;saveToGitHub: err.message == &quot; + err.message);"></outline>
						<outline text="callback (err);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;saveToGitHub: response == &quot; + utils.jsonStringify (response));"></outline>
						<outline text="var jstruct = {">
							<outline text="urlGitHub: &quot;https://github.com/&quot; + options.username + &quot;/&quot; + options.repository + &quot;/blob/master/&quot; + options.path"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="if (options.domain !== undefined) {">
							<outline text="jstruct.domain = options.lowerdomain; "></outline>
							<outline text="jstruct.urlHtml = &quot;http://&quot; + options.lowerdomain + options.origpath;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="callback (undefined, jstruct);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveGitHubFile (accessToken, host, path, data, callback) {">
			<outline text="var options = {">
				<outline text="domain: host,"></outline>
				<outline text="path: path,"></outline>
				<outline text="accessToken: accessToken,"></outline>
				<outline text="data: data,"></outline>
				<outline text="type: urlToMime (path),"></outline>
				<outline isComment="true" text="committer: {">
					<outline text="name: theRequest.params.name,"></outline>
					<outline text="email: theRequest.params.email"></outline>
					<outline text="},"></outline>
					</outline>
				<outline isComment="true" text="message: theRequest.params.msg,"></outline>
				<outline text="userAgent: config.userAgent"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="saveToGitHub (options, callback);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFlatPostList (blogData) {">
			<outline text="var theList = [];"></outline>
			<outline text="for (var i = 0; i &lt; blogData.posts.subs.length; i++) {">
				<outline text="var year = blogData.posts.subs [i];"></outline>
				<outline text="for (var j = 0; j &lt; year.subs.length; j++) {">
					<outline text="var month = year.subs [j];"></outline>
					<outline text="for (var k = 0; k &lt; month.subs.length; k++) {">
						<outline text="var day = month.subs [k];"></outline>
						<outline text="for (var l = 0; l &lt; day.subs.length; l++) {">
							<outline text="var post = day.subs [l];"></outline>
							<outline isComment="true" text="console.log (post.title);"></outline>
							<outline text="theList.push (post);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (theList);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildBlogRss (options, callback) {">
			<outline text="var host = options.domain;"></outline>
			<outline text="options.path = config.rssPath;"></outline>
			<outline text="getUserObject (host, config.dataPath, function (err, jstruct) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;buildBlogRss: err.message == &quot; + err.message);"></outline>
					<outline text="callback (err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var jsontext = getContent (jstruct);"></outline>
					<outline text="var blogData = JSON.parse (jsontext);"></outline>
					<outline isComment="true" text="console.log (&quot;buildBlogRss: jstruct == &quot; + utils.jsonStringify (blogData));"></outline>
					<outline text="var headElements = {">
						<outline text="title: blogData.title,"></outline>
						<outline text="link: &quot;http://&quot; + host + &quot;/&quot;,"></outline>
						<outline text="description: blogData.description,"></outline>
						<outline text="language: blogData.language,"></outline>
						<outline text="generator: myProductName + &quot; v&quot; + myVersion,"></outline>
						<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"></outline>
						<outline isComment="true" text="twitterScreenName: localStorage.twScreenName,"></outline>
						<outline text="maxFeedItems: blogData.maxFeedItems,"></outline>
						<outline text="appDomain: host,"></outline>
						<outline text=""></outline>
						<outline text="flRssCloudEnabled:  true,"></outline>
						<outline text="rssCloudDomain:  blogData.cloud.domain,"></outline>
						<outline text="rssCloudPort:  blogData.cloud.port,"></outline>
						<outline text="rssCloudPath: blogData.cloud.path,"></outline>
						<outline text="rssCloudRegisterProcedure:  &quot;&quot;,"></outline>
						<outline text="rssCloudProtocol:  blogData.cloud.protocol"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var flatPostList = getFlatPostList (blogData), rssHistory = new Array ();"></outline>
					<outline text="for (var i = 0; i &lt; flatPostList.length; i++) {">
						<outline text="var item = flatPostList [i];"></outline>
						<outline text="if (item.urlHtml) {">
							<outline text=""></outline>
							<outline text="console.log (utils.jsonStringify (item));"></outline>
							<outline text=""></outline>
							<outline text="var obj = {">
								<outline text="title: item.title,"></outline>
								<outline text="text: item.description,"></outline>
								<outline text="when: item.created,"></outline>
								<outline text="link: item.urlHtml,"></outline>
								<outline text="guid: {">
									<outline text="flPermalink: true,"></outline>
									<outline text="value: item.urlHtml"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="};"></outline>
								</outline>
							<outline text="rssHistory.push (obj);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var xmltext = rss.buildRssFeed (headElements, rssHistory);"></outline>
					<outline isComment="true" text="console.log (&quot;buildBlogRss: xmltext == &quot; + xmltext);"></outline>
					<outline text="options.data = xmltext;"></outline>
					<outline text="saveToGitHub (options, function (err, jstruct) {">
						<outline text="if (!err) {">
							<outline isComment="true" text="console.log (&quot;buildBlogRss: jstruct == &quot; + utils.jsonStringify (jstruct));"></outline>
							<outline text="var urlServer = &quot;http://&quot; + blogData.cloud.domain + &quot;:&quot; + blogData.cloud.port + blogData.cloud.path;"></outline>
							<outline text="rss.cloudPing (urlServer, jstruct.urlHtml);"></outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (undefined, jstruct);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function buildBlogRss (accessToken, host, callback) {">
			<outline text="getUserObject (host, config.dataPath, function (err, jstruct) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;buildBlogRss: err.message == &quot; + err.message);"></outline>
					<outline text="callback (err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var jsontext = getContent (jstruct);"></outline>
					<outline text="var blogData = JSON.parse (jsontext);"></outline>
					<outline isComment="true" text="console.log (&quot;buildBlogRss: jstruct == &quot; + utils.jsonStringify (blogData));"></outline>
					<outline text="var headElements = {">
						<outline text="title: blogData.title,"></outline>
						<outline text="link: undefined,"></outline>
						<outline text="description: blogData.description,"></outline>
						<outline text="language: blogData.language,"></outline>
						<outline text="generator: myProductName + &quot; v&quot; + myVersion,"></outline>
						<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"></outline>
						<outline isComment="true" text="twitterScreenName: localStorage.twScreenName,"></outline>
						<outline text="maxFeedItems: blogData.maxFeedItems,"></outline>
						<outline text="appDomain: host,"></outline>
						<outline text=""></outline>
						<outline text="flRssCloudEnabled:  true,"></outline>
						<outline text="rssCloudDomain:  blogData.cloud.domain,"></outline>
						<outline text="rssCloudPort:  blogData.cloud.port,"></outline>
						<outline text="rssCloudPath: blogData.cloud.path,"></outline>
						<outline text="rssCloudRegisterProcedure:  &quot;&quot;,"></outline>
						<outline text="rssCloudProtocol:  blogData.cloud.protocol"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var flatPostList = getFlatPostList (blogData), rssHistory = new Array ();"></outline>
					<outline text="for (var i = 0; i &lt; flatPostList.length; i++) {">
						<outline text="var item = flatPostList [i];"></outline>
						<outline text="if (item.urlHtml) {">
							<outline text=""></outline>
							<outline text="console.log (utils.jsonStringify (item));"></outline>
							<outline text=""></outline>
							<outline text="var obj = {">
								<outline text="title: item.title,"></outline>
								<outline text="text: item.description,"></outline>
								<outline text="when: item.created,"></outline>
								<outline text="link: item.urlHtml,"></outline>
								<outline text="guid: {">
									<outline text="flPermalink: true,"></outline>
									<outline text="value: item.urlHtml"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="};"></outline>
								</outline>
							<outline text="rssHistory.push (obj);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var xmltext = rss.buildRssFeed (headElements, rssHistory);"></outline>
					<outline isComment="true" text="console.log (&quot;buildBlogRss: xmltext == &quot; + xmltext);"></outline>
					<outline text="saveGitHubFile (accessToken, host, config.rssPath, xmltext, function (err, jstruct) {">
						<outline text="if (!err) {">
							<outline isComment="true" text="console.log (&quot;buildBlogRss: jstruct == &quot; + utils.jsonStringify (jstruct));"></outline>
							<outline text="var urlServer = &quot;http://&quot; + blogData.cloud.domain + &quot;:&quot; + blogData.cloud.port + blogData.cloud.path;"></outline>
							<outline text="rss.cloudPing (urlServer, jstruct.urlHtml);"></outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (undefined, jstruct);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getUserInfo (accessToken, callback) {">
			<outline text="var myRequest = {">
				<outline text="method: &quot;GET&quot;,"></outline>
				<outline text="url: &quot;https://api.github.com/user&quot;,"></outline>
				<outline text="headers: {">
					<outline text="&quot;User-Agent&quot;: config.userAgent,"></outline>
					<outline text="&quot;Authorization&quot;: &quot;token &quot; + accessToken"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="request (myRequest, function (err, response, body) { ">
				<outline text="var myResponse = {">
					<outline text="flError: true,"></outline>
					<outline text="message: undefined"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="if (err) {">
					<outline text="myResponse.message = err.message;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="try {">
						<outline text="myResponse.flError = false;"></outline>
						<outline text="myResponse.info = JSON.parse (body);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="catch (err) {">
						<outline text="myResponse.message = err.message;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="callback (myResponse);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getContent (jstruct) {">
			<outline text="if (jstruct.encoding == &quot;base64&quot;) {">
				<outline text="return (new Buffer (jstruct.content, &quot;base64&quot;)); "></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="return (jstruct.content);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function handleHttpRequest (theRequest) {">
			<outline text="var accessToken = theRequest.params.accessToken, params = theRequest.params, now = new Date ();"></outline>
			<outline text="function returnData (jstruct) {">
				<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function returnError (jstruct) {">
				<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function notFound (message) {">
				<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, message);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getFileContent (jstruct, callback) {">
				<outline isComment="true" text="console.log (&quot;getFileContent: jstruct == &quot; + utils.jsonStringify (jstruct));"></outline>
				<outline isComment="true" text="console.log (&quot;getFileContent: jstruct.type == &quot; + jstruct.type);"></outline>
				<outline text="if (jstruct.message !== undefined) { //9/26/18 by DW -- I think this means it was an error, haven't found ref in GH docs">
					<outline text="notFound (jstruct.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (jstruct.encoding == &quot;base64&quot;) {">
						<outline text="var buffer = new Buffer (jstruct.content, &quot;base64&quot;); "></outline>
						<outline text="callback (buffer);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="httpRequest (jstruct.download_url, function (err, response, fileContent) {">
							<outline text="if (err || (response.statusCode !== 200)) {">
								<outline text="notFound (&quot;Error getting the content of the file \&quot;&quot; + jstruct.name + &quot;.\&quot;&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="callback (fileContent);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function serveObject (host, path) {">
				<outline text="getUserObject (host, path, function (err, jstruct) {">
					<outline text="if (err) {">
						<outline text="notFound (err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (Array.isArray (jstruct)) { //it's a directory">
							<outline text="var flIndexFileServed = false;"></outline>
							<outline text="for (var i = 0; i &lt; jstruct.length; i++) {">
								<outline text="if (utils.beginsWith (jstruct [i].name, config.indexFileName)) {">
									<outline text="serveObject (host, path + jstruct [i].name);"></outline>
									<outline text="flIndexFileServed = true;"></outline>
									<outline text="break;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (!flIndexFileServed) {">
								<outline text="notFound (&quot;Couldn't serve the page because there was no \&quot;&quot; + config.indexFileName + &quot;\&quot; file in the directory.&quot;);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="getFileContent (jstruct, function (fileContent) {">
								<outline text="var ext = getFileExtension (path); "></outline>
								<outline text="function serveMarkdown () {">
									<outline text="var pagetable = deYamlIze (fileContent.toString ());"></outline>
									<outline text="pagetable.bodytext = marked (pagetable.text); //where deYamlIze stores the markdown text"></outline>
									<outline text="pagetable.host = theRequest.lowerhost;"></outline>
									<outline text="pagetable.path = theRequest.lowerpath;"></outline>
									<outline text="pagetable.ext = ext;"></outline>
									<outline text="delete pagetable.text;"></outline>
									<outline text="renderThroughTemplate (pagetable, function (err, htmltext) {">
										<outline text="if (err) {">
											<outline text="notFound (err.message);"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="else {">
											<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="});"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="switch (ext) {">
									<outline text="case &quot;md&quot;:">
										<outline text="serveMarkdown ();"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline isComment="true" text="case &quot;txt&quot;:">
										<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, fileContent);"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline text="default:">
										<outline text="theRequest.httpReturn (200, urlToMime (path), fileContent);"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function handleGitHubEvent (jsontext) {">
				<outline text="var jstruct = JSON.parse (theRequest.postBody);"></outline>
				<outline text="if (config.flDebugMessagesFromGitHub) {">
					<outline text="var f = &quot;debug/events/&quot; + Number (new Date ()) + &quot;.json&quot;;"></outline>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.writeFile (f, utils.jsonStringify (jstruct), function (err) {">
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var owner = jstruct.repository.owner.name;"></outline>
				<outline text="var repo = jstruct.repository.name;"></outline>
				<outline text="var path = jstruct.commits [0].modified [0];"></outline>
				<outline text="if (path !== undefined) { //something was modified, might be in the cache">
					<outline isComment="true" text="console.log (&quot;\nhandleGitHubEvent: owner == &quot; + owner + &quot;, repo == &quot; + repo + &quot;, path == &quot; + path + &quot;\n&quot;);"></outline>
					<outline text="cacheDelete (owner, repo, path);"></outline>
					<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, &quot;Thanks for the ping.&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function handleEditorEvent (domain, path) {">
				<outline text="var dstruct = config.domains [domain.toLowerCase ()]"></outline>
				<outline text="if (dstruct !== undefined) {">
					<outline isComment="true" text="console.log (&quot;\nhandleEditorEvent: domain == &quot; + domain + &quot;, path == &quot; + path + &quot;\n&quot;);"></outline>
					<outline text="cacheDelete (dstruct.username, dstruct.repo, dstruct.path + path);"></outline>
					<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, &quot;Thanks for the ping.&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function handleOauthCallback () {">
				<outline text="var params = {">
					<outline text="client_id: config.clientId,"></outline>
					<outline text="client_secret: config.clientSecret,"></outline>
					<outline text="code: theRequest.params.code"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="var apiUrl = &quot;https://github.com/login/oauth/access_token?&quot; + utils.buildParamList (params);"></outline>
				<outline isComment="true" text="apiUrl += &quot;?client_id=&quot; + config.clientId;"></outline>
				<outline isComment="true" text="apiUrl += &quot;&amp;client_secret=&quot; + config.clientSecret;"></outline>
				<outline isComment="true" text="apiUrl += &quot;&amp;code=&quot; + theRequest.params.code;"></outline>
				<outline text="var githubRequest = {">
					<outline text="method: &quot;POST&quot;,"></outline>
					<outline text="url: apiUrl"></outline>
					<outline isComment="true" text="followRedirect: true, "></outline>
					<outline isComment="true" text="headers: {Accept: &quot;application/json&quot;}"></outline>
					<outline text="};"></outline>
					</outline>
				<outline text="console.log (&quot;handleOauthCallback: githubRequest === &quot; + utils.jsonStringify (githubRequest));"></outline>
				<outline text="request (githubRequest, function (err, response, body) {">
					<outline text="if (err) {">
						<outline text="console.log (err.message);"></outline>
						<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline isComment="true" text="console.log (body);"></outline>
						<outline text="var postbody = qs.parse (body);"></outline>
						<outline text="var httpResponse = theRequest.sysResponse;"></outline>
						<outline text="var urlRedirect = config.urlEditorApp + &quot;?access_token=&quot; + postbody.access_token;"></outline>
						<outline text="httpResponse.writeHead (302, {&quot;location&quot;: urlRedirect});"></outline>
						<outline text="httpResponse.end (&quot;Redirect to this URL: &quot; + urlRedirect);"></outline>
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, &quot;We got the callback bubba.&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="switch (theRequest.lowerpath) {">
				<outline text="case &quot;/now&quot;:">
					<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, new Date ());"></outline>
					<outline text="return;"></outline>
					</outline>
				<outline text="case &quot;/oauthcallback&quot;:">
					<outline text="handleOauthCallback ();"></outline>
					<outline isComment="true" text="var apiUrl = &quot;https://github.com/login/oauth/access_token&quot;;"></outline>
					<outline isComment="true" text="apiUrl += &quot;?client_id=&quot; + config.clientId;"></outline>
					<outline isComment="true" text="apiUrl += &quot;&amp;client_secret=&quot; + config.clientSecret;"></outline>
					<outline isComment="true" text="apiUrl += &quot;&amp;code=&quot; + theRequest.params.code;g"></outline>
					<outline isComment="true" text="var githubRequest = {">
						<outline text="method: &quot;POST&quot;,"></outline>
						<outline text="url: apiUrl"></outline>
						<outline isComment="true" text="followRedirect: true, "></outline>
						<outline isComment="true" text="headers: {Accept: &quot;application/json&quot;}"></outline>
						<outline text="};"></outline>
						</outline>
					<outline isComment="true" text="console.log (&quot;/oauthcallback: githubRequest == &quot; + utils.jsonStringify (githubRequest));"></outline>
					<outline isComment="true" text="request (githubRequest, function (err, response, body) {">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"></outline>
							<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, err.message);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline isComment="true" text="console.log (body);"></outline>
							<outline text="var postbody = qs.parse (body);"></outline>
							<outline text="var httpResponse = theRequest.sysResponse;"></outline>
							<outline text="var urlRedirect = config.urlEnglishApp + &quot;?access_token=&quot; + postbody.access_token;"></outline>
							<outline text="httpResponse.writeHead (302, {&quot;location&quot;: urlRedirect});"></outline>
							<outline text="httpResponse.end (&quot;Redirect to this URL: &quot; + urlRedirect);"></outline>
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, &quot;We got the callback bubba.&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/eventfromgithub&quot;: //webhook call">
					<outline text="handleGitHubEvent (theRequest.postBody);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/eventfromeditor&quot;: //indicated object changed, remove from cache (ping)">
					<outline text="var params = theRequest.params;"></outline>
					<outline text="handleEditorEvent (params.domain, params.path);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/getdomains&quot;:">
					<outline text="returnData (config.domains);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/getuserinfo&quot;:">
					<outline text="getUserInfo (accessToken, function (result) {">
						<outline text="returnData (result);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/get&quot;:">
					<outline text="var domain = theRequest.params.domain;"></outline>
					<outline text="var path = theRequest.params.path;"></outline>
					<outline isComment="true" text="var username = theRequest.params.username;"></outline>
					<outline isComment="true" text="var repository = theRequest.params.repo;"></outline>
					<outline text="getContentFromGitHub (domain, path, function (err, content) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, urlToMime (path), content);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/save&quot;:">
					<outline text="var options = {">
						<outline text="domain: params.domain,"></outline>
						<outline text="path: params.path,"></outline>
						<outline text="accessToken: accessToken,"></outline>
						<outline text="data: params.text,"></outline>
						<outline text="type: &quot;text/plain&quot;,"></outline>
						<outline text="committer: {">
							<outline text="name: params.name,"></outline>
							<outline text="email: params.email"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="message: params.msg,"></outline>
						<outline text="userAgent: config.userAgent"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="saveToGitHub (options, function (err, result) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="returnData (result);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/savepost&quot;:">
					<outline isComment="true" text="function yamlIze (jsontext) {">
						<outline text="var jstruct = JSON.parse (jsontext);"></outline>
						<outline text="const delimiter = &quot;---\n&quot;;"></outline>
						<outline text="var text = jstruct.text;"></outline>
						<outline text="delete jstruct.text;"></outline>
						<outline text="var s = delimiter + yaml.safeDump (jstruct) + delimiter + text;"></outline>
						<outline text="return (s);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var options = {">
						<outline text="domain: theRequest.params.domain,"></outline>
						<outline text="path: theRequest.params.path,"></outline>
						<outline text="accessToken: accessToken,"></outline>
						<outline text="data: yamlIze (theRequest.params.text), //this is the diff"></outline>
						<outline text="type: &quot;text/plain&quot;,"></outline>
						<outline text="committer: {">
							<outline text="name: theRequest.params.name,"></outline>
							<outline text="email: theRequest.params.email"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="message: theRequest.params.msg,"></outline>
						<outline text="userAgent: config.userAgent"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="saveToGitHub (options, function (err, result) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="returnData (result);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/getpost&quot;:">
					<outline text="var domain = theRequest.params.domain;"></outline>
					<outline text="var path = theRequest.params.path;"></outline>
					<outline text="getContentFromGitHub (domain, path, function (err, content) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="var returnStruct = deYamlIze (content);"></outline>
							<outline text="returnStruct.domain = domain;"></outline>
							<outline text="returnData (returnStruct);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="case &quot;/repoget&quot;: //instead of a domain, take a username/repository to identify the location -- 10/10/18 by DW">
					<outline text="getFromGitHub (params.username, params.repository, params.path, function (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline isComment="true" text="console.log (&quot;/repoget: jstruct == &quot; + utils.jsonStringify (jstruct));"></outline>
							<outline text="theRequest.httpReturn (200, urlToMime (params.path), getContent (jstruct));"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline isComment="true" text="getContentFromGitHub (domain, path, function (err, content) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, urlToMime (path), content);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/reposave&quot;:">
					<outline text="var options = {">
						<outline text="username: theRequest.params.username,"></outline>
						<outline text="repository: theRequest.params.repo,"></outline>
						<outline text="path: theRequest.params.path,"></outline>
						<outline text="accessToken: accessToken,"></outline>
						<outline text="data: theRequest.params.text,"></outline>
						<outline text="type: &quot;text/plain&quot;,"></outline>
						<outline text="committer: {">
							<outline text="name: theRequest.params.name,"></outline>
							<outline text="email: theRequest.params.email"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="message: theRequest.params.msg,"></outline>
						<outline text="userAgent: config.userAgent"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="saveToGitHub (options, function (err, result) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="returnData (result);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="case &quot;/buildrss&quot;: ">
					<outline text="var options = {">
						<outline text="domain: params.domain,"></outline>
						<outline text="accessToken: accessToken,"></outline>
						<outline text="committer: {">
							<outline text="name: params.name,"></outline>
							<outline text="email: params.email"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="message: params.msg,"></outline>
						<outline text="userAgent: config.userAgent"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="buildBlogRss (options, function (err, data) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="returnData (data);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline isComment="true" text="buildBlogRss (accessToken, params.domain, function (err, data) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="returnData (data);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="default:">
					<outline text="serveObject (theRequest.lowerhost, theRequest.path);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function handleExternalRequest (options, callback) { //9/28/18 by DW -- an external caller is making a request">
			<outline isComment="true" text="Changes">
				<outline text="9/28/18; 11:24:09 AM by DW">
					<outline text="Created."></outline>
					</outline>
				</outline>
			<outline text="var theRequest = {">
				<outline text="lowerhost: options.host.toLowerCase (),"></outline>
				<outline text="lowerpath: options.path.toLowerCase (),"></outline>
				<outline text="path: options.path,"></outline>
				<outline text="postBody: options.postBody,"></outline>
				<outline text="params: options.params,"></outline>
				<outline text="sysResponse: options.sysResponse,"></outline>
				<outline text="httpReturn: callback"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="handleHttpRequest (theRequest);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function init (userConfig, flHandleHttpHere) {">
			<outline isComment="true" text="Changes">
				<outline text="9/28/18; 11:30:36 AM by DW">
					<outline text="New optional param, flHandleHttpHere. If true, we set up the HTTP server, otherwise we just accept the config params. "></outline>
					</outline>
				</outline>
			<outline text="if (flHandleHttpHere === undefined) {">
				<outline text="flHandleHttpHere = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"></outline>
			<outline text="for (var x in userConfig) {">
				<outline text="config [x] = userConfig [x];"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flHandleHttpHere) {">
				<outline text="davehttp.start (config, function (theRequest) {">
					<outline text="handleHttpRequest (theRequest);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		</body>
	</opml>
